=====================
Overview and Tutorial
=====================

---------
Equations
---------

The code uses a fairly standard pseudo-spectral algorithm to solve fluid
equations.
The incompressible Navier Stokes equations in velocity form are as
follows:

.. math::

    \partial_t \mathbf{u} + \mathbf{u} \cdot \nabla \mathbf{u} =
    - \nabla p + \nu \Delta \mathbf{u} + \mathbf{f}

In fact, the code solves the vorticity formulation of these equations:

.. math::
    \partial_t \mathbf{\omega} +
    \mathbf{u} \cdot \nabla \mathbf{\omega} =
    \mathbf{\omega} \cdot \nabla \mathbf{u} +
    \nu \Delta \mathbf{\omega} + \nabla \times \mathbf{f}

Statistics
----------

Basic quantities that can be computed in a pseudospectral code are the
following:

.. math::

    E = \frac{1}{2} \sum_{\mathbf{k}} \hat{\mathbf{u}} \cdot \hat{\mathbf{u}}^*, \hskip .5cm
    \varepsilon = \nu \sum_{\mathbf{k}} k^2 \hat{\mathbf{u}} \cdot \hat{\mathbf{u}}^*, \hskip .5cm
    \textrm{in general } \sum_{\mathbf{k}} k^p \hat{u_i} \cdot \hat{u_j}^*, \hskip .5cm
    \varepsilon_{\textrm{inj}} = \sum_{\mathbf{k}} \hat{\mathbf{u}} \cdot \hat{\mathbf{f}}^*


In fact, C++ code generated by
:class:`NavierStokes <bfps.NavierStokes.NavierStokes>`
computes and stores the velocity
and vorticity cospectra (9 components each):

.. math::

    \sum_{k \leq \|\mathbf{k}\| \leq k+dk}\hat{u_i} \cdot \hat{u_j}^*, \hskip .5cm
    \sum_{k \leq \|\mathbf{k}\| \leq k+dk}\hat{\omega_i} \cdot \hat{\omega_j}^*

In all honesty, this is overkill for homogenous and isotropic flows, but
in principle we will look at more complicated flows.

See :func:`compute_statistics <bfps.NavierStokes.NavierStokes.compute_statistics>`
and
:func:`compute_time_averages <bfps.NavierStokes.NavierStokes.compute_time_averages>`
for quantities
computed in postprocessing by the python code.

-----------
Conventions
-----------

The C++ backend is based on ``FFTW``, therefore the Fourier
representations are *transposed*.
In brief, this is the way the fields are represented on disk and in
memory (both in the C++ backend and in Python postprocessing):

    * real space representations of 3D vector fields consist of
      contiguous arrays, with the shape ``(nz, ny, nx, 3)``:
      :math:`n_z \times n_y \times n_x` triplets, where :math:`z` is the
      slowest coordinate, :math:`x` the fastest; each triplet is then
      the sequence of :math:`x` component, :math:`y` component and
      :math:`z` component.

    * Fourier space representations of 3D vector fields consist of
      contiguous arrays, with the shape ``(ny, nz, nx/2+1, 3)``:
      :math:`k_y` is the slowest coordinate, :math:`k_x` the fastest;
      each triplet of 3 complex numbers is then the :math:`(x, y, z)`
      components, as ``FFTW`` requires for the correspondence with the
      real space representations.

:func:`read_cfield <NavierStokes.NavierStokes.read_cfield>` will return
a properly shaped ``numpy.array`` containing a snapshot of the Fourier
representation of a 3D field.

If you'd like to construct the corresponding wave numbers, you can
follow this procedure:

.. code:: python

    import numpy as np
    from bfps import NavierStokes

    c = NavierStokes(
            work_dir = '/location/of/simulation/data',
            simname = 'simulation_name_goes_here')
    df = c.get_data_file()
    kx = df['kspace/kx'].value
    ky = df['kspace/ky'].value
    kz = df['kspace/kz'].value
    df.close()
    kval = np.zeros(kz.shape + ky.shape + kx.shape + (3,),
                    dtype = kx.dtype)
    kval[..., 0] = kx[None, None, :]
    kval[..., 1] = ky[:, None, None]
    kval[..., 2] = kz[None, :, None]

``kval`` will have the same shape as the result of
:func:`read_cfield <NavierStokes.NavierStokes.read_cfield>`.
Obviously, the machine being used should have enough RAM to hold the
field...

--------
Tutorial
--------

First DNS
---------

Installing ``bfps`` is not trivial, and the instructions are in
:ref:`sec-installation`.
After installing, you should have a new executable script
available, called ``bfps``, that you can execute.
Just executing it will run a small test DNS on a real space grid of size
:math:`32 \times 32 \times 32`, in the current
folder, with the simulation name ``test``.
So, open a console, and type ``bfps NavierStokes``:

.. code:: bash

    # depending on how curious you are, you may have a look at the
    # options first:
    bfps --help
    bfps NavierStokes --help
    # or you may just run it:
    bfps NavierStokes

The simulation itself should not take more than a few seconds, since
this is just a :math:`32^3` simulation run for 8 iterations.
First thing you can do afterwards is open up a python console, and type
the following:

.. _sec-first-postprocessing:

.. code:: python

    import numpy as np
    from bfps import NavierStokes

    c = NavierStokes(
            work_dir = '/location/of/simulation/data',
            simname = 'simulation_name_goes_here')
    c.compute_statistics()
    print ('Rlambda = {0:.0f}, kMeta = {1:.4f}, CFL = {2:.4f}'.format(
            c.statistics['Rlambda'],
            c.statistics['kMeta'],
            (c.parameters['dt']*c.statistics['vel_max'] /
             (2*np.pi/c.parameters['nx']))))
    print ('Tint = {0:.4e}, tauK = {1:.4e}'.format(c.statistics['Tint'],
                                                   c.statistics['tauK']))
    data_file = c.get_data_file()
    print ('total time simulated is = {0:.4e} Tint, {1:.4e} tauK'.format(
            data_file['iteration'].value*c.parameters['dt'] / c.statistics['Tint'],
            data_file['iteration'].value*c.parameters['dt'] / c.statistics['tauK']))

:func:`compute_statistics <bfps.NavierStokes.NavierStokes.compute_statistics>`
will read the data
file generated by the DNS, compute a bunch of basic statistics, for
example the Taylor scale Reynolds number :math:`R_\lambda` that we're
printing in the example code.

What happens is that the DNS will have generated an ``HDF5`` file
containing a bunch of specific datasets (spectra, moments of real space
representations, etc).
The function
:func:`compute_statistics <bfps.NavierStokes.NavierStokes.compute_statistics>`
performs simple postprocessing that may however be expensive, therefore
it also saves some data into a ``<simname>_postprocess.h5`` file, and
then it also performs some time averages, yielding the ``statistics``
dictionary that is used in the above code.

Behind the scenes
-----------------

In brief the following takes place:

    1. An instance ``c`` of
       :class:`NavierStokes <bfps.NavierStokes.NavierStokes>` is created.
       It is used to generate an :class:`argparse.ArgumentParser`, and
       it processes command line arguments given to the ``bfps
       NavierStokes`` command.
    2. reasonable DNS parameters are constructed from the command line
       arguments.
    4. ``c`` generates a parameter file ``<simname>.h5``, into which the
       various parameters are written.
       ``c`` also generates the various datasets that the backend code
       will write into (statistics and other stuff).
    3. ``c`` writes a C++ file that is compiled and linked against
       ``libbfps``.
    4. ``c`` executes the C++ code using ``mpirun``.
    5. the C++ code actually performs the DNS, and outputs various
       results into the ``<simname>.h5`` file.

After the simulation is done, things in :ref:`sec-first-postprocessing`
are simpler.
In fact, any ``HDF5`` capable software can be used to read the data
file, and the dataset names should be reasonably easy to interpret.

